/* 1 */ SELECT nombre from producto;
/* 2 */ SELECT nombre, precio from producto;
/* 3 */ SELECT * from producto;
/* 4 */ 
ALTER TABLE producto ADD precio__USD DOUBLE;
SELECT nombre, precio, precio__USD from producto;
/* 5 */
SELECT nombre AS 'nombre de producto', precio AS 'euros', precio__USD AS 'dólares' FROM producto;
/* 6 */
SELECT codigo, UPPER(nombre), precio, codigo_fabricante, precio__USD FROM producto;
/* 7 */
SELECT codigo, LOWER(nombre), precio, codigo_fabricante, precio__USD FROM producto;
/* 8 */
SELECT nombre, substring(UPPER(nombre),1, 2) FROM Tienda.fabricante;
/* 9 */
SELECT nombre, ROUND(precio) FROM Tienda.producto;
/* 10 */
SELECT nombre, TRUNCATE(precio,0) FROM Tienda.producto;
/* 11 */
SELECT codigo_fabricante FROM Tienda.producto;
/* 12 */
SELECT DISTINCT(codigo_fabricante) FROM Tienda.producto;
/* 13 */
SELECT nombre FROM Tienda.fabricante
ORDER BY nombre ;
/* 14 */
SELECT nombre FROM Tienda.fabricante
ORDER BY nombre DESC ;
/* 15 */

/* 16 */
SELECT * FROM Tienda.fabricante
WHERE codigo<6;
/* 17 */
SELECT * FROM Tienda.fabricante
WHERE codigo=4 or codigo=5;
/* 18 */
SELECT nombre, precio FROM Tienda.producto
ORDER BY precio 
LIMIT 1;
/* 19 */
SELECT nombre, precio FROM Tienda.producto
ORDER BY precio DESC
LIMIT 1;
/* 20 */
SELECT nombre FROM Tienda.producto
WHERE codigo_fabricante=2;
/* 21 */
SELECT nombre FROM Tienda.producto
WHERE precio<=120;
/* 22 */
SELECT nombre FROM Tienda.producto
WHERE precio>=400;
/* 23 */
SELECT nombre FROM Tienda.producto
WHERE NOT precio>=400;
/* 24 */
SELECT nombre FROM Tienda.producto
WHERE precio BETWEEN 80 AND 300;
/* 25 */
SELECT nombre FROM Tienda.producto
WHERE precio BETWEEN 60 AND 200;
/* 26 */
SELECT nombre FROM Tienda.producto
WHERE precio>200 AND codigo_fabricante=6;
/* 27 */
SELECT nombre FROM Tienda.producto
WHERE codigo_fabricante=1 OR codigo_fabricante=3 OR codigo_fabricante=5;
/* 28 */
SELECT nombre FROM Tienda.producto
WHERE codigo_fabricante IN (1,3,5);
/* 29 */
SELECT nombre, precio*100 AS céntimos FROM Tienda.producto;
/* 30 */
SELECT nombre FROM Tienda.fabricante
WHERE nombre LIKE 'S%';
/* 31 */
SELECT nombre FROM Tienda.fabricante
WHERE nombre LIKE '%E';
/* 32 */
SELECT nombre FROM Tienda.fabricante
WHERE nombre LIKE '%w%';
/* 33 */
SELECT nombre FROM Tienda.fabricante
WHERE nombre LIKE '____';
/* 34 */
SELECT nombre FROM Tienda.producto
WHERE nombre LIKE '%portátil%';
/* 35 */
SELECT nombre, precio FROM Tienda.producto
WHERE nombre LIKE '%monitor%' AND precio<215;
/* 36 */
SELECT nombre, precio FROM Tienda.producto
WHERE precio>=180 ORDER BY precio DESC, nombre ASC;

/* 1.1.4 Consultas multitabla (Composición interna) */

-- Resuelva todas las consultas utilizando la sintaxis de SQL1 y SQL2.
-- 1.	Devuelve una lista con el nombre del producto, precio y nombre de fabricante de todos los productos de la base de datos.
/*SQL1*/
SELECT producto.nombre, producto.precio, fabricante.nombre FROM tienda.producto, tienda.fabricante
WHERE fabricante.codigo = producto.codigo_fabricante ;

/*SQL2*/
SELECT producto.nombre, producto.precio, fabricante.nombre FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante;

-- 2.	Devuelve una lista con el nombre del producto, precio y nombre de fabricante de todos los productos de la base de datos. Ordene el resultado por el nombre del fabricante, por orden alfabético.
/*SQL1*/
SELECT producto.nombre, producto.precio, fabricante.nombre FROM tienda.producto, tienda.fabricante
WHERE fabricante.codigo = producto.codigo_fabricante
ORDER BY fabricante.nombre;
/*SQL2*/
SELECT producto.nombre, producto.precio, fabricante.nombre FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
ORDER BY fabricante.nombre;

-- 3.	Devuelve una lista con el código del producto, nombre del producto, código del fabricante y nombre del fabricante, de todos los productos de la base de datos.
-- SQL1
SELECT producto.codigo, producto.nombre, fabricante.codigo FROM tienda.producto, tienda.fabricante
WHERE fabricante.codigo = producto.codigo_fabricante;

/*SQL2*/
SELECT producto.codigo, producto.nombre, fabricante.codigo FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante;

-- 4.	Devuelve el nombre del producto, su precio y el nombre de su fabricante, del producto más barato.
-- SQL1
SELECT producto.nombre, producto.precio, fabricante.nombre FROM tienda.producto, tienda.fabricante
WHERE fabricante.codigo = producto.codigo_fabricante
ORDER BY producto.precio LIMIT 1;

/*SQL2*/
SELECT producto.nombre, producto.precio, fabricante.nombre FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
ORDER BY producto.precio LIMIT 1;

-- 5.	Devuelve el nombre del producto, su precio y el nombre de su fabricante, del producto más caro.
/*SQL1*/
SELECT producto.nombre, producto.precio, fabricante.nombre FROM tienda.producto, tienda.fabricante
WHERE fabricante.codigo = producto.codigo_fabricante
ORDER BY producto.precio DESC LIMIT 1;

/*SQL2*/
SELECT producto.nombre, producto.precio, fabricante.nombre FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
ORDER BY producto.precio DESC LIMIT 1;

-- 6.	Devuelve una lista de todos los productos del fabricante Lenovo.
/*SQL1*/
SELECT producto.nombre, fabricante.nombre FROM tienda.producto, tienda.fabricante
WHERE fabricante.codigo = producto.codigo_fabricante
AND fabricante.nombre LIKE '%Lenovo%';

/*SQL2*/
SELECT producto.nombre, fabricante.nombre FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE fabricante.nombre LIKE '%Lenovo%';

-- 7.	Devuelve una lista de todos los productos del fabricante Crucial que tengan un precio mayor que 200€.

/*SQL1*/
SELECT producto.nombre FROM tienda.producto, tienda.fabricante
WHERE fabricante.codigo = producto.codigo_fabricante
AND fabricante.nombre LIKE 'CRUCIAL'
AND producto.precio > 200;

/*SQL2*/
SELECT producto.nombre FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE fabricante.nombre LIKE '%CRUCIAL%'
AND producto.precio > 200; 

-- 8.	Devuelve un listado con todos los productos de los fabricantes Asus, Hewlett-Packardy Seagate. Sin utilizar el operador IN.

/*SQL1*/
SELECT producto.nombre FROM tienda.producto, tienda.fabricante
WHERE fabricante.codigo = producto.codigo_fabricante
AND fabricante.nombre LIKE 'Asus' OR fabricante.nombre LIKE 'Hewlett-Packard' OR fabricante.nombre LIKE 'Seagate';

/*SQL2*/
SELECT producto.nombre FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE fabricante.nombre LIKE 'ASUS' or fabricante.nombre LIKE '%Hewlett-Packard%' OR fabricante.nombre LIKE'%Seagate%';

-- 9.	Devuelve un listado con todos los productos de los fabricantes Asus, Hewlett-Packardy Seagate. Utilizando el operador IN.

/* SQL1
SELECT producto.nombre FROM tienda.producto, tienda.fabricante
WHERE fabricante.codigo = producto.codigo_fabricante
AND fabricante.nombre IN ('Asus', 'Hewlett-Packard', 'Seagate'); 
*/
/*SQL2*/
SELECT producto.nombre FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE fabricante.nombre IN ('Asus', 'Hewlett-Packard', 'Seagate'); 

-- 10.	Devuelve un listado con el nombre y el precio de todos los productos de los fabricantes cuyo nombre termine por la vocal e.

/*  SQL1
SELECT producto.nombre FROM tienda.producto, tienda.fabricante
WHERE fabricante.codigo = producto.codigo_fabricante
AND fabricante.nombre LIKE '%e';*/

/* SQL2
SELECT producto.nombre, producto.precio FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE fabricante.nombre LIKE '%e';
*/

-- 11.	Devuelve un listado con el nombre y el precio de todos los productos cuyo nombre de fabricante contenga el carácter w en su nombre.
/*  SQL1 
SELECT producto.nombre, fabricante.nombre FROM tienda.producto, tienda.fabricante
WHERE fabricante.codigo = producto.codigo_fabricante
AND fabricante.nombre LIKE '%w%'; */

/* SQL2*/

SELECT producto.nombre, producto.precio FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE fabricante.nombre LIKE '%w%';

 -- 12.	Devuelve un listado con el nombre de producto, precio y nombre de fabricante, de todos los productos que tengan un precio mayor o igual a 180€. Ordene el resultado en primer lugar por el precio (en orden descendente) y en segundo lugar por el nombre (en orden ascendente)
 
 /*  SQL1 */
SELECT producto.nombre, producto.precio, fabricante.nombre FROM tienda.producto, tienda.fabricante
WHERE fabricante.codigo = producto.codigo_fabricante
AND producto.precio>=180 ORDER BY producto.precio DESC, producto.nombre ASC;

/* SQL2

SELECT producto.nombre, producto.precio, fabricante.nombre FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE producto.precio>=180 ORDER BY producto.precio DESC, producto.nombre ASC;*/


-- 13.	Devuelve un listado con el código y el nombre de fabricante, solamente de aquellos fabricantes que tienen productos asociados en la base de datos. 
/* SQL1*/
SELECT DISTINCT fabricante.nombre FROM tienda.producto, tienda.fabricante
WHERE fabricante.codigo = producto.codigo_fabricante ;

/*SQL2
SELECT DISTINCT fabricante.nombre FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante ; */

-- 1.1.5 Consultas multitabla (Composición externa) Resuelva todas las consultas utilizando las cláusulas LEFT JOIN y RIGHT JOIN.
-- 1.	Devuelve un listado de todos los fabricantes que existen en la base de datos, junto con los productos que tiene cada uno de ellos. El listado deberá mostrar también aquellos fabricantes que no tienen productos asociados.
SELECT fabricante.nombre, producto.nombre FROM tienda.producto RIGHT JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante; 


-- 2.	Devuelve un listado donde sólo aparezcan aquellos fabricantes que no tienen ningún producto asociado.

SELECT fabricante.nombre FROM tienda.producto RIGHT JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE producto.codigo_fabricante IS NULL;

-- 3.	¿Pueden existir productos que no estén relacionados con un fabricante? Justifique su respuesta.

-- PodríaN existir si no hubiera asociación entre llaves primarias. Es decir si hubiera un producto cuyo producto.codigo_fabricante no estuviera relacionado con fabricante.codigo

-- 1.1.6 Consultas resumen
-- 1.	Calcula el número total de productos que hay en la tabla productos.

SELECT count(nombre) FROM Tienda.producto;

-- 2.	Calcula el número total de fabricantes que hay en la tabla fabricante.
SELECT COUNT(nombre) FROM Tienda.fabricante;

-- 3.	Calcula el número de valores distintos de código de fabricante aparecen en la tabla productos.
SELECT COUNT(DISTINCT(codigo_fabricante)) FROM Tienda.producto;

-- 4.	Calcula la media del precio de todos los productos.

SELECT AVG(precio) FROM Tienda.producto;

-- 5.	Calcula el precio más barato de todos los productos.

SELECT MIN(precio) FROM Tienda.producto;

-- 6.	Calcula el precio más caro de todos los productos.
SELECT MAX(precio) FROM Tienda.producto;

-- 7.	Lista el nombre y el precio del producto más barato.

SELECT nombre, precio FROM Tienda.producto
ORDER BY precio ASC
LIMIT 1;

-- 8.	Lista el nombre y el precio del producto más caro.

SELECT nombre, precio FROM Tienda.producto
ORDER BY precio DESC
LIMIT 1;

-- 9.	Calcula la suma de los precios de todos los productos.

SELECT SUM(precio) FROM Tienda.producto;

-- 10.	Calcula el número de productos que tiene el fabricante Asus.

SELECT COUNT(producto.nombre) FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE fabricante.nombre LIKE '%Asus%';

-- 11.	Calcula la media del precio de todos los productos del fabricante Asus.

SELECT AVG(producto.precio) FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE fabricante.nombre LIKE '%Asus%';

-- 12.	Calcula el precio más barato de todos los productos del fabricante Asus.

SELECT producto.precio FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE fabricante.nombre LIKE '%Asus%'
ORDER BY producto.precio 
LIMIT 1 ;

-- 13.	Calcula el precio más caro de todos los productos del fabricante Asus.

SELECT producto.precio FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE fabricante.nombre LIKE '%Asus%'
ORDER BY producto.precio DESC
LIMIT 1 ;

-- 14.	Calcula la suma de todos los productos del fabricante Asus.

SELECT SUM(producto.precio) FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE fabricante.nombre LIKE '%Asus%';

-- 15.	Muestra el precio máximo, precio mínimo, precio medio y el número total de productos que tiene el fabricante Crucial.
-- PRECIO MAXIMO
SELECT producto.precio FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE fabricante.nombre LIKE '%CRUCIAL%'
ORDER BY producto.precio DESC
LIMIT 1;

-- PRECIO MINIMO
SELECT producto.precio FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE fabricante.nombre LIKE '%CRUCIAL%'
ORDER BY producto.precio ASC
LIMIT 1;

-- PRECIO MEDIO
SELECT AVG(producto.precio) FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE fabricante.nombre LIKE '%CRUCIAL%';


-- NUMERO TOTAL
SELECT COUNT(producto.precio) FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE fabricante.nombre LIKE '%CRUCIAL%';

-- 16.	Muestra el número total de productos que tiene cada uno de los fabricantes. El listado también debe incluir los fabricantes que no tienen ningún producto. El resultado mostrará dos columnas, una con el nombre del fabricante y otra con el número de productos que tiene. Ordene el resultado descendentemente por el número de productos.

SELECT fabricante.nombre, COUNT(producto.codigo_fabricante) FROM tienda.producto
RIGHT JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
GROUP BY fabricante.nombre ;


-- 17.	Muestra el precio máximo, precio mínimo y precio medio de los productos de cada uno de los fabricantes. El resultado mostrará el nombre del fabricante junto con los datos que se solicitan.

SELECT  fabricante.nombre, MAX(producto.precio),MIN(producto.precio),AVG(producto.precio) FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
GROUP BY fabricante.nombre;

-- 18.	Muestra el precio máximo, precio mínimo, precio medio y el número total de productos de los fabricantes que tienen un precio medio superior a 200€. No es necesario mostrar el nombre del fabricante, con el código del fabricante es suficiente.

SELECT codigo_fabricante, MAX(precio),MIN(precio),AVG(precio), COUNT(codigo_fabricante) FROM tienda.producto
GROUP BY codigo_fabricante
HAVING(AVG(PRECIO))>200;

-- 19.	Muestra el nombre de cada fabricante, junto con el precio máximo, precio mínimo, precio medio y el número total de productos de los fabricantes que tienen un precio medio superior a 200€. Es necesario mostrar el nombre del fabricante.

SELECT  fabricante.nombre, MAX(producto.precio),MIN(producto.precio),AVG(producto.precio),COUNT(fabricante.nombre) FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
group by fabricante.nombre
HAVING(AVG(producto.precio))>200;

-- 20.	Calcula el número de productos que tienen un precio mayor o igual a 180€.

SELECT COUNT(precio) FROM Tienda.producto
WHERE precio>=180;

-- 21.	Calcula el número de productos que tiene cada fabricante con un precio mayor o igual a 180€.

SELECT fabricante.nombre, COUNT(producto.precio) FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE producto.precio>=180
GROUP BY fabricante.nombre;

-- 22.	Lista el precio medio los productos de cada fabricante, mostrando solamente el código del fabricante.
SELECT codigo_fabricante, AVG(precio) FROM Tienda.producto
GROUP BY codigo_fabricante;

-- 23.	Lista el precio medio los productos de cada fabricante, mostrando solamente el nombre del fabricante.

SELECT fabricante.nombre, AVG(producto.precio) FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
GROUP BY fabricante.nombre;

-- 24.	Lista los nombres de los fabricantes cuyos productos tienen un precio medio mayor o igual a 150€.

SELECT fabricante.nombre, AVG(producto.precio) FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
GROUP BY fabricante.nombre
HAVING AVG(producto.precio)>=150;

-- 25.	Devuelve un listado con los nombres de los fabricantes que tienen 2 o más productos.
SELECT fabricante.nombre, COUNT(producto.codigo_fabricante) FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
GROUP BY fabricante.nombre
HAVING COUNT(producto.codigo_fabricante)>=2;

-- 26.	Devuelve un listado con los nombres de los fabricantes y el número de productos que tiene cada uno con un precio superior o igual a 220 €. No es necesario mostrar el nombre de los fabricantes que no tienen productos que cumplan la condición.

SELECT fabricante.nombre, COUNT(producto.codigo_fabricante) FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
WHERE producto.precio>220
GROUP BY fabricante.nombre;

-- 27.	Devuelve un listado con los nombres de los fabricantes y el número de productos que tiene cada uno con un precio superior o igual a 220 €. El listado debe mostrar el nombre de todos los fabricantes, es decir, si hay algún fabricante que no tiene productos con un precio superior o igual a 220€ deberá aparecer en el listado con un valor igual a 0 en el número de productos.
SELECT fabricante.nombre, SUM(IF(producto.precio>=220,1,0))  FROM tienda.producto
RIGHT JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
GROUP BY fabricante.nombre
ORDER BY SUM(IF(producto.precio>=220,1,0)) DESC;

-- 28.	Devuelve un listado con los nombres de los fabricantes donde la suma del precio de todos sus productos es superior a 1000 €.

SELECT fabricante.nombre FROM tienda.producto
INNER JOIN tienda.fabricante
ON fabricante.codigo = producto.codigo_fabricante
GROUP BY fabricante.nombre
HAVING SUM(producto.precio)>1000;



-- 1.1.7 Subconsultas (En la cláusula WHERE)
-- 1.1.7.1 Con operadores básicos de comparación
-- 1.	Devuelve todos los productos del fabricante Lenovo. (Sin utilizar INNER JOIN).

SELECT producto.nombre FROM tienda.producto 
WHERE
producto.codigo_fabricante = 
 (SELECT fabricante.codigo FROM tienda.fabricante 
 WHERE fabricante.nombre ='Lenovo');

-- 2.	Devuelve todos los datos de los productos que tienen el mismo precio que el producto más caro del fabricante Lenovo. (Sin utilizar INNER JOIN).
SELECT * FROM tienda.producto
		WHERE precio =
			(SELECT MAX(precio) FROM tienda.producto 
			WHERE
			producto.codigo_fabricante = 
				(SELECT fabricante.codigo FROM tienda.fabricante 
				WHERE fabricante.nombre ='Lenovo')
			);
            
-- 3.	Lista el nombre del producto más caro del fabricante Lenovo.
SELECT nombre FROM tienda.producto 
WHERE
	producto.codigo_fabricante = (SELECT fabricante.codigo FROM tienda.fabricante 
	WHERE fabricante.nombre ='Lenovo')
    ORDER BY precio DESC
    LIMIT 1;

-- 4.	Lista el nombre del producto más barato del fabricante Hewlett-Packard.
SELECT nombre FROM tienda.producto 
WHERE
	producto.codigo_fabricante = (SELECT fabricante.codigo FROM tienda.fabricante 
	WHERE fabricante.nombre ='Hewlett-Packard')
    ORDER BY precio 
    LIMIT 1;

-- 5.	Devuelve todos los productos de la base de datos que tienen un precio mayor o igual al producto más caro del fabricante Lenovo.

SELECT nombre FROM tienda.producto 
WHERE precio > (
	SELECT precio FROM tienda.producto 
		WHERE
		producto.codigo_fabricante = (SELECT fabricante.codigo FROM tienda.fabricante 
			WHERE fabricante.nombre ='Lenovo')
		ORDER BY precio desc
		LIMIT 1);
        
-- 6.	Lista todos los productos del fabricante Asus que tienen un precio superior al precio medio de todos sus productos.

SELECT nombre FROM tienda.producto
WHERE precio >
	(SELECT AVG(precio) FROM tienda.producto 
		WHERE
		producto.codigo_fabricante = (SELECT fabricante.codigo FROM tienda.fabricante 
			WHERE fabricante.nombre ='Asus')
	)	
AND producto.codigo_fabricante = (SELECT fabricante.codigo FROM tienda.fabricante 
			WHERE fabricante.nombre ='Asus');


-- 1.1.7.2 Subconsultas con ALL y ANY

--  8.	Devuelve el producto más caro que existe en la tabla producto sin hacer uso de MAX, ORDER BY ni LIMIT.

SELECT nombre FROM tienda.producto 
WHERE precio >= ALL (
	SELECT precio FROM tienda.producto 
	);

-- 9.	Devuelve el producto más barato que existe en la tabla producto sin hacer uso de MIN, ORDER BY ni LIMIT.
SELECT nombre FROM tienda.producto 
WHERE precio <= ALL (
	SELECT precio FROM tienda.producto 
	);

-- 10.	Devuelve los nombres de los fabricantes que tienen productos asociados. (Utilizando ALL o ANY).

SELECT fabricante.nombre FROM tienda.fabricante
WHERE fabricante.codigo = ANY (
	SELECT DISTINCT codigo_fabricante FROM tienda.producto);
    
-- 11.	Devuelve los nombres de los fabricantes que no tienen productos asociados. (Utilizando ALL o ANY).

SELECT fabricante.nombre FROM tienda.fabricante
WHERE fabricante.codigo != ALL (
	SELECT DISTINCT codigo_fabricante FROM tienda.producto);
    
-- 1.1.7.3 Subconsultas con IN y NOT IN
-- 12.	Devuelve los nombres de los fabricantes que tienen productos asociados. (Utilizando IN o NOT IN).

SELECT fabricante.nombre FROM tienda.fabricante
WHERE fabricante.codigo IN (
	SELECT DISTINCT codigo_fabricante FROM tienda.producto);

-- 13.	Devuelve los nombres de los fabricantes que no tienen productos asociados. (Utilizando IN o NOT IN).

SELECT fabricante.nombre FROM tienda.fabricante
WHERE fabricante.codigo NOT IN (
	SELECT DISTINCT codigo_fabricante FROM tienda.producto);
    
-- 1.1.7.4 Subconsultas con EXISTS y NOT EXISTS
-- 14.	Devuelve los nombres de los fabricantes que tienen productos asociados. (Utilizando EXISTS o NOT EXISTS).
SELECT nombre FROM tienda.fabricante
WHERE EXISTS(
	SELECT codigo_fabricante FROM tienda.producto
	WHERE producto.codigo_fabricante= fabricante.codigo);


-- 15.	Devuelve los nombres de los fabricantes que no tienen productos asociados. (Utilizando EXISTS o NOT EXISTS).

SELECT nombre FROM tienda.fabricante
WHERE NOT EXISTS(
	SELECT codigo_fabricante FROM tienda.producto
	WHERE producto.codigo_fabricante= fabricante.codigo);


